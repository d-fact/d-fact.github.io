<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Homepage on Differential Facts</title><link>https://d-fact.github.io/factbase-site/</link><description>Recent content in Homepage on Differential Facts</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://d-fact.github.io/factbase-site/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview of Extractors</title><link>https://d-fact.github.io/factbase-site/ext/ext/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/ext/ext/</guid><description>Extractors are used to produce &amp;#34;basic&amp;#34; knowledge (facts) about input (source code, bytecode, VCS logs, etc.) in textual formats so that they can be used in next phase processing or analyses.
Some extractors are language-independent, i.e., do not process code or irrelavent to language features, such as those generating facts about hunk dependency.
hunk dependency
history dependency
Other extractors are language-dependent, which usually rely on part of the toolchain of specific languages.</description></item><item><title>Atomic Changes</title><link>https://d-fact.github.io/factbase-site/ext/diff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/ext/diff/</guid><description> Java Facts about atomic changes of Java projects are extracted by Modified CSlicer.
java -jar &amp;#34;target/cslicer-1.0.0-jar-with-dependencies.jar&amp;#34; -c CONFIG_FILE -e fact --ext diff C/C++ Facts about atomic changes of C/C++ projects are extracted by GumTree.</description></item><item><title>Semantic History Slicing</title><link>https://d-fact.github.io/factbase-site/app/Hislicing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/app/Hislicing/</guid><description>Semantic history slicing identifies the commits related to a particular high-level functional slicing criteria in change histories. In one concrete instantiation, a slicing criteria is defined in terms of a set of tests; a particular functionality is considered to be implemented if its corresponding set of tests pass. A semantic history slice (or slice for short) of the original change history is then a sub-sequence of H′ ⊆ H, i.</description></item><item><title>Semantic History Slicing</title><link>https://d-fact.github.io/factbase-site/exp/hs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/exp/hs/</guid><description>Detailed Data In the following table, we list relevant data of tested projects to show how facts re-using bring efficiency improvement.
Test column: &amp;#34;static&amp;#34; means all other facts except coverage information for each functionality, all other numbers such as 288 is the functionality ID used in the DoSC data set, i.e. IO-288.
Three Facts columns (#Fact, Ext, Query): shows number of lines of facts generated, time used for extraction and time used for querying.</description></item><item><title>Change Impact Analysis</title><link>https://d-fact.github.io/factbase-site/app/ChangeImpact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/app/ChangeImpact/</guid><description>We implement Change Impact Analysis on the library upgrade scenario, where we try to find out the client classes affected by a library upgrade.
This experiment is done to implement a light-weight solution for the upgrade compatibility checking problem:
Using facts and query scripts to find out the client classes affected by the library upgrade;
Running facts-guided test generation, i.e., guide test generator (EvoSuite was used) to only use these affected test classes as the test targets;</description></item><item><title>Test Coverage</title><link>https://d-fact.github.io/factbase-site/ext/test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/ext/test/</guid><description>Java Facts about atomic changes of Java projects are extracted by Modified CSlicer.
java -jar &amp;#34;target/cslicer-1.0.0-jar-with-dependencies.jar&amp;#34; -c CONFIG_FILE -e fact --ext cov C/C++ Building projects with --coverage and -fprofile-abs-path and there would be note files (*.gcno)
After running tests, there would be count data files (*.gcda). Invoke gcov-helper report would call gcov on those files to generate coverage files (*.</description></item><item><title>Facts Helper</title><link>https://d-fact.github.io/factbase-site/use/factsutil/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/use/factsutil/</guid><description>Python scripts are developed as helpers for running various experiments using facts. They can be browsed here, or you have had them if you have cloned Modified CSlicer.
Usage Before using, change BASE_DIR in factutils/hislicing/env_const.py to the local path of CSlicer.
Install in the virtual env % python3 -m venv &amp;lt;DIR&amp;gt; % source &amp;lt;DIR&amp;gt;/bin/activate # install in the same pth of setup.py % pip3 install -e .</description></item><item><title>Modified CSlicer</title><link>https://d-fact.github.io/factbase-site/use/cslicer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/use/cslicer/</guid><description>Some of our extractors are developed based upon the existing codebase of CSlicer.
Build from source Clone the repo. Shallow clone of the specific branch for saving time is recommended.
git clone --depth 1 https://bitbucket.org/liyistc/gitslice.git -b facts Checkout to the facts branch.
If you use the command in step.1, you should already in this branch.
Clone submodules.</description></item><item><title>Regression Test Selection</title><link>https://d-fact.github.io/factbase-site/app/RTS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/app/RTS/</guid><description>A simplified RTS process is described as follows.
First we find out all program entities directly or indirectly call/reference/… into the changed entities.
allchange = Update + Insert + Delete; alldeps = call + contain + reference; affected = (alldeps*) . (dom allchange); Next we filter out test classes using intersection.
testClazz = dom TestClass; affectedTestclass = testClazz ^ affected; Abstract classes are removed and their subclasses are selected.</description></item><item><title>C/C++ Atomic Changes</title><link>https://d-fact.github.io/factbase-site/use/gumtree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/use/gumtree/</guid><description>See github/d-fact/gumtree.
Use AST from clang instead of cgum A parser, named cgum, is used in GumTree to generate AST in XML for C programs. For facts interoperability, we use AST generated by Clang instead of cgum&amp;#39;s. Changes to GumTree New TAFormatter extends ActionFormatter, output atomic changes as facts in TA format.
Use our AST emitter based on Clang instead of cgum/srcml for C/C++.</description></item><item><title>Static Dependency</title><link>https://d-fact.github.io/factbase-site/ext/static/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/ext/static/</guid><description> Java Facts about static dependency between program entities such as method invocation and reference of Java projects are extracted by Modified CSlicer.
java -jar &amp;#34;target/cslicer-1.0.0-jar-with-dependencies.jar&amp;#34; -c CONFIG_FILE -e fact --ext dep C/C++ Facts about static dependency of C/C++ projects are extracted by ClangEx.</description></item><item><title>Lifted Pointer Analysis</title><link>https://d-fact.github.io/factbase-site/exp/lift/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/exp/lift/</guid><description>Time usage decomposition Lifted analysis on multiple versions consists of three steps:
Extract facts on each version
Merge into version-annotated representation
Run lifted Analysis on version-annotated facts
Time decomposition by each step is shown below:
Project Extract Merge Analysis CSV 93.88% 0.14% 5.98% IO 93% 0.6% 6.4% CONFIG 97.</description></item><item><title>Commits Dependency</title><link>https://d-fact.github.io/factbase-site/ext/hunkdep/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/ext/hunkdep/</guid><description>Commits dependency facts include hunk dependency and plain history dependency. Both are language-neutral and can be used with any git repos. Hunk Dependency Hunk dependency facts extractor is implemented based on CSlicer. See Usage: CSlicer for guide on building modified CSlicer from source.
java -jar &amp;#34;target/cslicer-1.0.0-jar-with-dependencies.jar&amp;#34; -c CONFIG_FILE -e fact --ext hunk History Dependency History facts represent git commit history graph in facts. Use github/d-fact/ext-gitfacts for this purpose.</description></item><item><title>Facts Formats</title><link>https://d-fact.github.io/factbase-site/fact/fmt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/fact/fmt/</guid><description>Datalog and Tuple-Attribute and Datalog are two languages used in current factbase implementations.
Tuple-Attribute Language Tuple-Attribute file can contain following four sections:
SCHEME TUPLE: SCHEME ATTRIBUTE: FACT TUPLE: FACT ATTRIBUTE: which are interpreted as in the following grid:
Tuple Attribute Scheme Allowed Edges Allowed Attributes Fact Actual Edges Actual Attributes SCHEME TUPLE defines allowed edges in the typed graph, e.</description></item></channel></rss>