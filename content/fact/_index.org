#+title: Facts
#+weight: 10

[[https://en.wikipedia.org/wiki/Datalog][Datalog]] and [[https://www.swag.uwaterloo.ca/grok/grokdoc/ta_rsf.html][Tuple-Attribute]] and Datalog are two languages used in current factbase implementations.


* Tuple-Attribute Language
  Tuple-Attribute file can contain following four sections:
  #+BEGIN_SRC
SCHEME TUPLE:

SCHEME ATTRIBUTE:

FACT TUPLE:

FACT ATTRIBUTE:
  #+END_SRC
  which are interpreted as in the following grid:
  |----------+---------------+--------------------|
  |          | *Tuple*       | *Attribute*        |
  |----------+---------------+--------------------|
  | *Scheme* | Allowed Edges | Allowed Attributes |
  | *Fact*   | Actual Edges  | Actual Attributes  |
  |----------+---------------+--------------------|

=SCHEME TUPLE= defines allowed edges in the typed graph,
e.g., the following scheme tuple section allows three types of
edges between =Prog= entities.
#+begin_src
SCHEME TUPLE :
Update Prog Prog
Delete Prog Prog
Insert Prog Prog
#+end_src

=SCHEME ATTRIBUTE= defines allowed attributes of edges already defined
in =SCHEME TUPLE= section.
E.g., all of three types of edges defined above can have two attributes:
=commit= and =commit_parent= which annotate an edge representing an atomic change
with commit information.
#+begin_src
SCHEME ATTRIBUTE :
(Update) {commit commit_parent}
(Insert) {commit commit_parent}
(Delete) {commit commit_parent}
#+end_src

The two =SCHME= parts are analogues of schemas in relational database.
And two =FACT= parts store actual data (edges and attributes) of those
pre-defined types.

#+begin_src
FACT TUPLE :
Insert "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase()" "org.apache.commons.csv.CSVFormat"

FACT ATTRIBUTE :
(Insert "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase()" "org.apache.commons.csv.CSVFormat") {
  commit = "d54b339caa945f35b4b2536b1455f314e57808dd"
  commit_parent = "2f76dfabd14f34cb8a49df1ddaeab5ed6d0d7cbb"
}
#+end_src


* Datalog
  For Datalog, we use Soufflé as the backend engine.
  Detailed grammar can be seen in [[https://souffle-lang.github.io/datalog][souffle: datalog]].

  The same schema above can be expressed in datalog as three declarations.
#+begin_src Prolog
.decl Update(pnew: symbol, pold: symbol, c: symbol, cp: symbol)
.decl Delete(pnew: symbol, pold: symbol, c: symbol, cp: symbol)
.decl Insert(pnew: symbol, pold: symbol, c: symbol, cp: symbol)
#+end_src

And the same facts can be stored in a =Insert.facts=, where each fact is
represented by a row of TAB-seperated tuples.

#+begin_src Prolog
"org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase()" "org.apache.commons.csv.CSVFormat" "d54b339caa945f35b4b2536b1455f314e57808dd" "2f76dfabd14f34cb8a49df1ddaeab5ed6d0d7cbb"
#+end_src

With an input directive =.input Insert(IO=file, filename=/path/to/Insert.facts)=,
Soufflé can read facts from the specified file.

* Complete Examples
  Complete examples of facts can be seen in
  [[https://github.com/d-fact/tse-eval][github: tse-eval]].
