<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Applications on Differential Facts</title><link>https://d-fact.github.io/factbase-site/app/</link><description>Recent content in Applications on Differential Facts</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://d-fact.github.io/factbase-site/app/index.xml" rel="self" type="application/rss+xml"/><item><title>Semantic History Slicing</title><link>https://d-fact.github.io/factbase-site/app/Hislicing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/app/Hislicing/</guid><description>Semantic history slicing identifies the commits related to a particular high-level functional slicing criteria in change histories. In one concrete instantiation, a slicing criteria is defined in terms of a set of tests; a particular functionality is considered to be implemented if its corresponding set of tests pass. A semantic history slice (or slice for short) of the original change history is then a sub-sequence of H′ ⊆ H, i.</description></item><item><title>Change Impact Analysis</title><link>https://d-fact.github.io/factbase-site/app/ChangeImpact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/app/ChangeImpact/</guid><description>We implement Change Impact Analysis on the library upgrade scenario, where we try to find out the client classes affected by a library upgrade.
This experiment is done to implement a light-weight solution for the upgrade compatibility checking problem:
Using facts and query scripts to find out the client classes affected by the library upgrade;
Running facts-guided test generation, i.e., guide test generator (EvoSuite was used) to only use these affected test classes as the test targets;</description></item><item><title>Regression Test Selection</title><link>https://d-fact.github.io/factbase-site/app/RTS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://d-fact.github.io/factbase-site/app/RTS/</guid><description>A simplified RTS process is described as follows.
First we find out all program entities directly or indirectly call/reference/… into the changed entities.
allchange = Update + Insert + Delete; alldeps = call + contain + reference; affected = (alldeps*) . (dom allchange); Next we filter out test classes using intersection.
testClazz = dom TestClass; affectedTestclass = testClazz ^ affected; Abstract classes are removed and their subclasses are selected.</description></item></channel></rss>